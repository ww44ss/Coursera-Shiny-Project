mtcars1<-cbind(mtcars, resid$rmpg)
head(mtcars1)
p<-ggplot(mtcars1, aes(wt, resid$rmpg, color=factor(am))) + geom_point(size=3)
p<-p+ggtitle("Residuals mpg versus weight")
p<-p+labs(x="weight (1000's of lbs)", y="residuals")
p
```
p<-p+geom_smooth()
p
p<-p+geom_smooth(se=FALSE)
p
p<-ggplot(mtcars1, aes(wt, resid$rmpg, color=factor(am))) + geom_point(size=3)
p<-p+ggtitle("Residuals mpg versus weight")
p<-p+labs(x="weight (1000's of lbs)", y="residuals")
p<-p+geom_smooth(se=FALSE)
p
p<-ggplot(mtcars1, aes(wt, resid$rmpg, color=factor(am))) + geom_point(size=3)
p<-p+ggtitle("Residuals mpg versus weight")
p<-p+labs(x="weight (1000's of lbs)", y="residuals")
p<-p+geom_smooth(method=lm,se=FALSE)
p
p<-p+geom_smooth(method=lm,se=TRUE)
p
f1
summary(f1)
summary(f1)[3]
summary(f1)[6]
summary(f1)[6:10]
summary(f1)[8]
summary(f1)[8,1]
summary(f1)[8][1]
summary(f1)[8][2]
summary(f1)$r.squared
mtcars2=mutate(mtcars1, invwt=1/wt)
mtcars2=mutate(mtcars2, invdisp=1/disp)
mtcars2=mutate(mtcars1, invwt=1/wt)
mtcars2=mutate(mtcars2, invdisp=1/disp)
p1<-ggplot(mtcars2, aes(invwt, mpg, color=factor(am))) + geom_point(size=3)
p1<-p1+ggtitle("mpg versus 1/weight")
p1<-p1+labs(x="1/weight (1/1000's of lbs)", y="miles per gallon")
f2<-lm(mpg~ invwt + invdisp, data=mtcars2)
int<-coef(f2)[1]
slp<-coef(f2)[2]
p1<-p1+geom_abline(intercept=int, slope=slp)
p1
coef(f2)
plot(f2)
resid(f2)/(1-hatvalues(f2))
p1<-p1+geom_abline(f2)
p1
vif(f2)
library(car)
install.packages("car")
library(car)
vif(f2)
anova(f1,f2)
data(mtcars)
library(plyr)
mtcars2=mutate(mtcars, invwt=1/wt, invdisp=1/disp)
pairs(mpg~invdisp+am+invwt,data=mtcars,
main="Exploratory Analysis")
mtcars2<-mutate(mtcars, invwt=1/wt)
mtcars2<-mutate(mtcars2, invdisp~1/disp)
pairs(mpg~invdisp+am+invwt,data=mtcars,
main="Exploratory Analysis")
pairs(mpg~invdisp+am+invwt,data=mtcars2,
main="Exploratory Analysis")
head(mtcars2)
mtcars2<-mutate(mtcars2, invdisp=1/disp)
pairs(mpg~invdisp+am+invwt,data=mtcars2,
main="Exploratory Analysis")
library(reshape2) # for melt
df <- melt(outer(1:4, 1:4), varnames = c("X1", "X2"))
df
?predict
source('~/Documents/courses/Data Products Quiz 1.R')
source('~/Documents/courses/Data Products Quiz 1.R')
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install.packages("rCharts")
?rCharts
library(rCharts)
install.packages(c("Hmisc", "RCurl", "reshape2", "ROAuth"))
install.packages(c("jsonlite", "mgcv", "RCurl", "reshape2"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(rCharts)
require(rCharts)
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
a<-dTable(airquality, sPaginationType = "full_numbers")
head(a)
source('~/Documents/TripcheckR/TwitterReaderPub.R')
source('~/Documents/TripcheckR/TwitterReader.R')
source('~/Documents/TripcheckR/TwitterReader.R')
source('~/Documents/TripcheckR/TwitterReader.R')
source('~/Documents/TripcheckR/TwitterReader.R')
source('~/Documents/TripcheckR/TwitterReader.R')
clean_data
head(clean_data)
write.csv(clean_data, "20.csv")
ls()
?write.csv
getwd()
source('~/Documents/TripcheckR/TwitterReader.R')
?t
df <- data.frame(period=rep(1:4,2),
farm=c(rep('A',4),rep('B',4)),
cumVol=c(1,5,15,31,10,12,16,24),
other = 1:8);
df
require(dplyr)
install.packages("dplyr")
require(dplyr)
df %.%
group_by(farm) %.%
mutate(volume = cumVol - lag(cumVol, default = cumVol[1]))
df <- data.frame(period=rep(1:4,2),
farm=c(rep('A',4),rep('B',4)),
cumVol=c(1,5,15,31,10,12,16,24),
other = 1:8);
df
df %>% mutate(volume = cumVol - lag(cumVol, default = cumVol[1]))
?mutate
mutate(df, volume = cumVol - lag(cumVol, default = cumVol[1])))
mutate(df, volume = cumVol - lag(cumVol, default = cumVol[1])
)
library(caret)
library(kernlab)
data(spam)
head(spam)
str(spam)
colnames(spam)
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
##get columns with IL
cn<-colnames(training)
cnIL<-grepl("IL", cn)
trainingIL<-training[,cnIL]
testingIL<-testing[,cnIL]
trainingIL<-trainingIL[,-13]
testingIL<-testingIL[,-13]
##Question 4 answer
prep_trainingIL<-preProcess(trainingIL)
centerscaled<-predict(prep_trainingIL, trainingIL)
summary(prcomp(centerscaled))
##Question 5
##add diagnosis to data sets
trainingIL<-cbind(training$diagnosis, trainingIL)
testingIL<-cbind(training$diagnosis, trainingIL)
##fix colnames
head(trainingIL)
head(testingIL)
colnames(trainingIL)[1]<-"diagnosis"
colnames(testingIL)[1]<-"diagnosis"
##Using PCA
##construct new PCA data set
pcaTrainIL<-preProcess(trainingIL[,-1], method="pca", pcaComp=7)
normalmodel<-glm(diagnosis~., data=trainingIL)
head(trainingIL)
normalmodel<-glm(diagnosis~., data=trainingIL)
pcaTrainIL<-preProcess(trainingIL[,-1], method="pca", pcaComp=7)
pcatrainingIL<-predict(pcaTrainIL, pcatrainedIL)
pcaTrainIL<-preProcess(trainingIL[,-1], method="pca", pcaComp=7)
pcatrainingIL<-predict(pcaTrainIL, trainingIL[,-1])
##create two model fits
pcamodelfit<-train(trainingIL$diagnosis~., method="glm", data=pcatrainingIL)
modelfit<-train(trainingIL$diagnosis~., method="glm", data=trainingIL)
testingIL$diagnosis
pcaTrainIL<-preProcess(trainingIL[,-1], method="pca", pcaComp=7)
pcatrainingIL<-predict(pcaTrainIL, trainingIL[,-1])
##create two model fits
pcamodelfit<-train(trainingIL$diagnosis~., method="glm", data=pcatrainingIL)
modelfit<-train(trainingIL$diagnosis~., method="glm", data=trainingIL)
##Test PCA
testedIL<-predict(pcaTrainIL, testingIL[,-1])
str(pcaTrainIL)
head(testingIL)
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
head(testingIL)
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
##get columns with IL
cn<-colnames(training)
cnIL<-grepl("IL", cn)
trainingIL<-training[,cnIL]
testingIL<-testing[,cnIL]
trainingIL<-trainingIL[,-13]
testingIL<-testingIL[,-13]
##Question 4 answer
prep_trainingIL<-preProcess(trainingIL)
centerscaled<-predict(prep_trainingIL, trainingIL)
summary(prcomp(centerscaled))
##Question 5
##add diagnosis to data sets
trainingIL<-cbind(training$diagnosis, trainingIL)
testingIL<-cbind(training$diagnosis, testingIL)
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
##get columns with IL
cn<-colnames(training)
cnIL<-grepl("IL", cn)
trainingIL<-training[,cnIL]
testingIL<-testing[,cnIL]
trainingIL<-trainingIL[,-13]
testingIL<-testingIL[,-13]
##Question 4 answer
prep_trainingIL<-preProcess(trainingIL)
centerscaled<-predict(prep_trainingIL, trainingIL)
summary(prcomp(centerscaled))
##Question 5
##add diagnosis to data sets
trainingIL<-cbind(training$diagnosis, trainingIL)
testingIL<-cbind(testing$diagnosis, testingIL)
##fix colnames
colnames(trainingIL)[1]<-"diagnosis"
colnames(testingIL)[1]<-"diagnosis"
head(testingIL)
##Using PCA
##construct new PCA data set
pcaTrainIL<-preProcess(trainingIL[,-1], method="pca", pcaComp=7)
pcatrainingIL<-predict(pcaTrainIL, trainingIL[,-1])
##create two model fits
pcamodelfit<-train(trainingIL$diagnosis~., method="glm", data=pcatrainingIL)
modelfit<-train(trainingIL$diagnosis~., method="glm", data=trainingIL)
##Test PCA
testedIL<-predict(pcaTrainIL, testingIL[,-1])
confusionMatrix(testingIL$diagnosis,predict(pcamodelfit,testingIL))
confusionMatrix(testingIL$diagnosis,predict(pcamodelfit,testedIL))
confusionMatrix(testingIL$diagnosis, predict(modelfit, testingIL))
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R', echo=TRUE)
install.packages(dev.tools)
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/Coursera Data Products")
getwd()
ls()
getwd()
setwd("~/courses")
getwd()
ls()
?plot
?ncol
time1<-proc.time()
time2<-proc.time()
time2-time1
a<-time2-time1
a[1]
a[3]
a[[3,1]]
b<-a[2]
b
a[3]
a[1]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
test<-segmentationOriginal[segmentationOriginal$Case=="Test",]
train<-segmentationOriginal[segmentationOriginal$Case=="Train",]
dim(test)
dim(test)
dim(train)
set.seed(125)
colnames(test)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
modFit <- train(Class ~ .,method="rpart",data=train)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
?classCenter
??classCenter
install.packages("randomForest")
rfNews()
load(randomForest)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
data(olive)
head(olive)
olive = olive[,-1]
head(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
require(caret)
modFit <- train(Area ~ .,method="rpart",data=olive)
plot(modFit$$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE, main="X")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
newdata = as.data.frame(t(colMeans(olive)))
?predict
modPredict<-predict(modFit, newdata)
head(modPredict)
str(modPredict)
head(newdata)
?tree
require(tree)
?tree
install.packages("tree")
?tree
modTree<-tree(Area~., data=olive)
treePredict<-predict(modtree, newdata=newdata)
treePredict<-predict(modTree, newdata=newdata)
modTree<-tree(Area~., data=olive)
require(tree)
modTree<-tree(Area~., data=olive)
treePredict<-predict(modTree, newdata=newdata)
treePredict
?qplot
shiny()
library(shiny)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
summary(SAModel)
summary(SAmodel)
SApredict<-predict(SAmodel, testSA)
confusionMatrix(testSA$chd, SApredict)
library(caret)
confusionMatrix(testSA$chd, SApredict)
SApredict
testSA$chd
missClass(testSA$chd, SApredict)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, SApredict)
SAtestpredict<-predict(SAmodel, testSA)
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
SAtestpredict
hist(as.vector(SAtestpredict))
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
hist(as.vector(SAtestpredict))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd))
missClass(testSA$chd, SApredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
hist(as.vector(testSA$chd), fill="lightblue")
hist(as.vector(testSA$chd), col="lightblue")
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
#library(caret)
#confusionMatrix(testSA$chd, SAtestpredict)
#confusionMatrix(trainSA$chd, SAtrainpredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
set.seed(13234)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
#library(caret)
#confusionMatrix(testSA$chd, SAtestpredict)
#confusionMatrix(trainSA$chd, SAtrainpredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
?glm
?train
SAmodelt<-train(formula, data=trainSA, method="glm", family="binomial")
SAheart$chd<-as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
set.seed(13234)
formula<-chd~alcohol+obesity+tobacco+typea+ldl
SAmodel<-glm(formula, family="binomial", data=trainSA)
SAmodelt<-train(formula, data=trainSA, method="glm")
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
hist(as.numeric(testSA$chd), col="lightblue")
hist(as.numeric(testSA$chd-1), col="lightblue")
hist(as.numeric(testSA$chd)-1, col="lightblue")
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
require(caret)
model1 <- train(y~., data = vowel.train, method="rf")
varimp(model1)
?varimp
??varimp
varImp(model1)
?varIMP
varImp
?varImp
varImp(model1, scale=FALSE)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf")
varImp(model1, scale=FALSE)
model2 <- train(y~., data = vowel.train, method="rf")
varImp(model2)
model2 <- train(y~., data = vowel.test, method="rf")
varImp(model2)
varImp(model1, value="gcv")
varImp(model1, value="nsubsets")
varImp(model1, value="rss")
set.seed(33833)
varImp(model1, value="rss")
varImp(model2)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
varImp(model1)
varImp(model1, type=2)
library(shiny)
runApp()
getwd()
setwd("Coursera-Shiny-Project")
runApp()
runApp()
runApp()
clear()
clear()
?quit
q
getwd()
runApp()
q
runApp()
runApp()
