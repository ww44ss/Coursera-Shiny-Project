data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
##get columns with IL
cn<-colnames(training)
cnIL<-grepl("IL", cn)
trainingIL<-training[,cnIL]
testingIL<-testing[,cnIL]
trainingIL<-trainingIL[,-13]
testingIL<-testingIL[,-13]
##Question 4 answer
prep_trainingIL<-preProcess(trainingIL)
centerscaled<-predict(prep_trainingIL, trainingIL)
summary(prcomp(centerscaled))
##Question 5
##add diagnosis to data sets
trainingIL<-cbind(training$diagnosis, trainingIL)
testingIL<-cbind(training$diagnosis, testingIL)
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
##get columns with IL
cn<-colnames(training)
cnIL<-grepl("IL", cn)
trainingIL<-training[,cnIL]
testingIL<-testing[,cnIL]
trainingIL<-trainingIL[,-13]
testingIL<-testingIL[,-13]
##Question 4 answer
prep_trainingIL<-preProcess(trainingIL)
centerscaled<-predict(prep_trainingIL, trainingIL)
summary(prcomp(centerscaled))
##Question 5
##add diagnosis to data sets
trainingIL<-cbind(training$diagnosis, trainingIL)
testingIL<-cbind(testing$diagnosis, testingIL)
##fix colnames
colnames(trainingIL)[1]<-"diagnosis"
colnames(testingIL)[1]<-"diagnosis"
head(testingIL)
##Using PCA
##construct new PCA data set
pcaTrainIL<-preProcess(trainingIL[,-1], method="pca", pcaComp=7)
pcatrainingIL<-predict(pcaTrainIL, trainingIL[,-1])
##create two model fits
pcamodelfit<-train(trainingIL$diagnosis~., method="glm", data=pcatrainingIL)
modelfit<-train(trainingIL$diagnosis~., method="glm", data=trainingIL)
##Test PCA
testedIL<-predict(pcaTrainIL, testingIL[,-1])
confusionMatrix(testingIL$diagnosis,predict(pcamodelfit,testingIL))
confusionMatrix(testingIL$diagnosis,predict(pcamodelfit,testedIL))
confusionMatrix(testingIL$diagnosis, predict(modelfit, testingIL))
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R')
source('~/Documents/courses/Machine Learning Quiz2 PCA Examples.R', echo=TRUE)
install.packages(dev.tools)
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/Coursera Data Products")
getwd()
ls()
getwd()
setwd("~/courses")
getwd()
ls()
?plot
?ncol
time1<-proc.time()
time2<-proc.time()
time2-time1
a<-time2-time1
a[1]
a[3]
a[[3,1]]
b<-a[2]
b
a[3]
a[1]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
test<-segmentationOriginal[segmentationOriginal$Case=="Test",]
train<-segmentationOriginal[segmentationOriginal$Case=="Train",]
dim(test)
dim(test)
dim(train)
set.seed(125)
colnames(test)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
modFit <- train(Class ~ .,method="rpart",data=train)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
?classCenter
??classCenter
install.packages("randomForest")
rfNews()
load(randomForest)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
data(olive)
head(olive)
olive = olive[,-1]
head(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
require(caret)
modFit <- train(Area ~ .,method="rpart",data=olive)
plot(modFit$$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE, main="X")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
newdata = as.data.frame(t(colMeans(olive)))
?predict
modPredict<-predict(modFit, newdata)
head(modPredict)
str(modPredict)
head(newdata)
?tree
require(tree)
?tree
install.packages("tree")
?tree
modTree<-tree(Area~., data=olive)
treePredict<-predict(modtree, newdata=newdata)
treePredict<-predict(modTree, newdata=newdata)
modTree<-tree(Area~., data=olive)
require(tree)
modTree<-tree(Area~., data=olive)
treePredict<-predict(modTree, newdata=newdata)
treePredict
?qplot
shiny()
library(shiny)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
summary(SAModel)
summary(SAmodel)
SApredict<-predict(SAmodel, testSA)
confusionMatrix(testSA$chd, SApredict)
library(caret)
confusionMatrix(testSA$chd, SApredict)
SApredict
testSA$chd
missClass(testSA$chd, SApredict)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, SApredict)
SAtestpredict<-predict(SAmodel, testSA)
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
SAtestpredict
hist(as.vector(SAtestpredict))
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
hist(as.vector(SAtestpredict))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd))
missClass(testSA$chd, SApredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
hist(as.vector(testSA$chd), fill="lightblue")
hist(as.vector(testSA$chd), col="lightblue")
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
#library(caret)
#confusionMatrix(testSA$chd, SAtestpredict)
#confusionMatrix(trainSA$chd, SAtrainpredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
set.seed(13234)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
#library(caret)
#confusionMatrix(testSA$chd, SAtestpredict)
#confusionMatrix(trainSA$chd, SAtrainpredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
?glm
?train
SAmodelt<-train(formula, data=trainSA, method="glm", family="binomial")
SAheart$chd<-as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
set.seed(13234)
formula<-chd~alcohol+obesity+tobacco+typea+ldl
SAmodel<-glm(formula, family="binomial", data=trainSA)
SAmodelt<-train(formula, data=trainSA, method="glm")
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
hist(as.numeric(testSA$chd), col="lightblue")
hist(as.numeric(testSA$chd-1), col="lightblue")
hist(as.numeric(testSA$chd)-1, col="lightblue")
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
require(caret)
model1 <- train(y~., data = vowel.train, method="rf")
varimp(model1)
?varimp
??varimp
varImp(model1)
?varIMP
varImp
?varImp
varImp(model1, scale=FALSE)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf")
varImp(model1, scale=FALSE)
model2 <- train(y~., data = vowel.train, method="rf")
varImp(model2)
model2 <- train(y~., data = vowel.test, method="rf")
varImp(model2)
varImp(model1, value="gcv")
varImp(model1, value="nsubsets")
varImp(model1, value="rss")
set.seed(33833)
varImp(model1, value="rss")
varImp(model2)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
varImp(model1)
varImp(model1, type=2)
datafile = "SFPD_Incidents_-_Current_Year__2014_.csv"
data <- read.csv(datafile)
##fix day of week order
data$DayOfWeek <- factor(data$DayOfWeek, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
getwd()
setwd("Coursera-Shiny-Project")
datafile = "SFPD_Incidents_-_Current_Year__2014_.csv"
data <- read.csv(datafile)
##fix day of week order
data$DayOfWeek <- factor(data$DayOfWeek, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
##for simplicity keep only complete cases
data<-data[complete.cases(data),]
data$Date<-as.Date(as.character(data$Date), "%m/%d/%Y")
#had to be a little clever with the time , basically trick everything to think it is the same day.
#data$Time<-as.POSIXct(paste("1970-01-01", as.character(data$Time)), format="%Y-%m-%d %H:%M")
##while the above works. I found the analysis looks easier just hacking out the hour....
##Alternate method is just to that the hh and convert to a number.
##this proved reliable and not too complicated.
data$Time <- as.numeric(substring(as.character(data$Time),1,2))
mdata<-data[data$Time==10,]
ndata<-data[data$Time==22,]
require(ggmap)
require(mapproj)
require(ggplot2)
##Subset data by crime
## here focus on only top crimes
PlotTheft <-data[data$Category=="LARCENY/THEFT", ]
mPlotTheft <-mdata[mdata$Category=="LARCENY/THEFT", ]
nPlotTheft <-mdata[ndata$Category=="LARCENY/THEFT", ]
PlotVehicle<-data[data$Category=="VEHICLE THEFT", ]
PlotAssault<-data[data$Category=="ASSAULT", ]
PlotVandalism<-data[data$Category=="VANDALISM", ]
##get map data
map <- get_map(source="google", maptype="roadmap", location = 'San Francisco', zoom = 13)
##generate map
map1 <- ggmap(map)
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .05, color="red", size = 3)
#map3<-map2 + geom_point(aes(x = PlotAssault$X, y = PlotAssault$Y), data = PlotAssault, alpha = .1, color="blue", size = 3)
#if (input$id2=="Assault") map2<-map2 + geom_point(aes(x = PlotVehicle$X, y = PlotVehicle$Y), data = PlotVehicle, alpha = .2, color="darkgreen", size = 3)
map2
data<-data[data$X>-122.470,]
data<-data[data$Y>37.735,]
PlotTheft <-data[data$Category=="LARCENY/THEFT", ]
mPlotTheft <-mdata[mdata$Category=="LARCENY/THEFT", ]
nPlotTheft <-mdata[ndata$Category=="LARCENY/THEFT", ]
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .05, color="red", size = 3)
map2
t<-complete.cases(nPlotTheft)
dim(t)
dim(nPlotTheft)
head(nPlotTheft)
runApp()
library(shiny)
runApp()
PlotTheft <-data[data$Category=="LARCENY/THEFT"&data$Time==20, c("X","Y")]
str(PlotTheft)
dim(PlotTheft)
head(PlotTheft)
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .05, color="red", size = 3)
map2
data <- read.csv(datafile)
##fix day of week order
data$DayOfWeek <- factor(data$DayOfWeek, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
##for simplicity keep only complete cases
data<-data[complete.cases(data),]
data$Date<-as.Date(as.character(data$Date), "%m/%d/%Y")
#had to be a little clever with the time , basically trick everything to think it is the same day.
#data$Time<-as.POSIXct(paste("1970-01-01", as.character(data$Time)), format="%Y-%m-%d %H:%M")
##while the above works. I found the analysis looks easier just hacking out the hour....
##Alternate method is just to that the hh and convert to a number.
##this proved reliable and not too complicated.
data$Time <- as.numeric(substring(as.character(data$Time),1,2))
data<-data[data$X>-122.470,]
data<-data[data$Y>37.735,]
data<-data[data$Y<37.81,]
data<-data[data$Y>37.375,]
mdata<-data[data$Time==10,]
ndata<-data[data$Time==22,]
require(ggmap)
require(mapproj)
require(ggplot2)
PlotTheft <-data[data$Category=="LARCENY/THEFT", c("X","Y")]
mPlotTheft <-mdata[mdata$Category=="LARCENY/THEFT", c("X","Y")]
nPlotTheft <-mdata[ndata$Category=="LARCENY/THEFT", c("X","Y")]
map <- get_map(source="google", maptype="roadmap", location = 'San Francisco', zoom = 13)
map1 <- ggmap(map)
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .05, color="red", size = 3)
map2
table(round(nPlotTheft$X,2))
table(round(nPlotTheft$X,2), round(nPlotTheft$Y,2))
datafile = "SFPD_Incidents_-_Current_Year__2014_.csv"
data <- read.csv(datafile)
##fix day of week order
data$DayOfWeek <- factor(data$DayOfWeek, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
##for simplicity keep only complete cases
data<-data[complete.cases(data),]
data$Date<-as.Date(as.character(data$Date), "%m/%d/%Y")
data$Time <- as.numeric(substring(as.character(data$Time),1,2))
data<-data[data$X>-122.470,]
data<-data[data$Y>37.735,]
data<-data[data$Y<37.81,]
data<-data[data$X<-122.375,]
mdata<-data[data$Time==10,]
ndata<-data[data$Time==22,]
require(ggmap)
require(mapproj)
require(ggplot2)
PlotTheft <-data[data$Category=="LARCENY/THEFT", c("X","Y")]
mPlotTheft <-mdata[mdata$Category=="LARCENY/THEFT", c("X","Y")]
nPlotTheft <-mdata[ndata$Category=="LARCENY/THEFT", c("X","Y")]
map <- get_map(source="google", maptype="roadmap", location = 'San Francisco', zoom = 13)
##generate map
map1 <- ggmap(map)
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .05, color="red", size = 3)
map2
str(nPlotTheft)
datafile = "SFPD_Incidents_-_Current_Year__2014_.csv"
data <- read.csv(datafile)
##fix day of week order
data$DayOfWeek <- factor(data$DayOfWeek, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
##for simplicity keep only complete cases
data<-data[complete.cases(data),]
data$Date<-as.Date(as.character(data$Date), "%m/%d/%Y")
data$Time <- as.numeric(substring(as.character(data$Time),1,2))
dim(data)
data<-data[data$X>-122.470,]
dim(data)
data<-data[data$Y>37.735,]
dim(data)
data<-data[data$Y<37.81,]
dim(data)
data<-data[data$X<-122.375,]
dim(data)
data <- read.csv(datafile)
##fix day of week order
data$DayOfWeek <- factor(data$DayOfWeek, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
##for simplicity keep only complete cases
data<-data[complete.cases(data),]
data$Date<-as.Date(as.character(data$Date), "%m/%d/%Y")
#had to be a little clever with the time , basically trick everything to think it is the same day.
#data$Time<-as.POSIXct(paste("1970-01-01", as.character(data$Time)), format="%Y-%m-%d %H:%M")
##while the above works. I found the analysis looks easier just hacking out the hour....
##Alternate method is just to that the hh and convert to a number.
##this proved reliable and not too complicated.
data$Time <- as.numeric(substring(as.character(data$Time),1,2))
dim(data)
data<-data[data$X> -122.470,]
dim(data)
data<-data[data$Y> 37.735,]
dim(data)
data<-data[data$Y< 37.81,]
dim(data)
data<-data[data$X< -122.375),]
data<-data[data$X< -122.375,]
dim(data)
mdata<-data[data$Time==10,]
ndata<-data[data$Time==22,]
PlotTheft <-data[data$Category=="LARCENY/THEFT", c("X","Y")]
mPlotTheft <-mdata[mdata$Category=="LARCENY/THEFT", c("X","Y")]
nPlotTheft <-mdata[ndata$Category=="LARCENY/THEFT", c("X","Y")]
map <- get_map(source="google", maptype="roadmap", location = 'San Francisco', zoom = 13)
##generate map
map1 <- ggmap(map)
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .05, color="red", size = 3)
#map3<-map2 + geom_point(aes(x = PlotAssault$X, y = PlotAssault$Y), data = PlotAssault, alpha = .1, color="blue", size = 3)
#if (input$id2=="Assault") map2<-map2 + geom_point(aes(x = PlotVehicle$X, y = PlotVehicle$Y), data = PlotVehicle, alpha = .2, color="darkgreen", size = 3)
map2
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .1, color="red", size = 3)
map2
dim(nPlotTheft)
tiling<-table(round(nPlotTheft$X,2) , round(nPlotTheft$Y,2) )
tiling
t(tiling)
pp1<-ggplot(X,Y, data=nPlotTheft, aes=("red"))
pp1<-ggplot(nPlotTheft$X,nPlotTheft$Y, data=nPlotTheft, aes=("red"))
pp1<-ggplot(nPlotTheft$X,nPlotTheft$Y, data=nPlotTheft, aes=("red")) +geom_point()
pp1<-ggplot(nPlotTheft, aes=(X,Y)) +geom_point()
pp1<-ggplot(nPlotTheft, aes(X,Y)) +geom_point()
pp1
pp1+map1
map1+pp1
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .1, color="red", size = 3)
map2
map2<-map1 + geom_point(aes(x = mPlotTheft$X, y = mPlotTheft$Y), data = mPlotTheft, alpha = .1, color="red", size = 3)
map2
nPlotTheft <-ndata[ndata$Category=="LARCENY/THEFT", c("X","Y")]
map2<-map1 + geom_point(aes(x = nPlotTheft$X, y = nPlotTheft$Y), data = nPlotTheft, alpha = .1, color="red", size = 3)
map2
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
runApp(display.mode='showcase')
library(shiny)
runApp(display.mode='showcase')
runApp(display.mode='showcase')
shiny::runApp()
